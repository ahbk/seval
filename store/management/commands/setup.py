import json
import random
import re
from django.core.management.base import BaseCommand
from store.models import Test, Battery, Task, BatteryTask


class Command(BaseCommand):

    def handle(self, *args, **options):

        next_id = 34

        blocks = [

                ( # 1
                    {"r":[30,150,60],"s":[[0,0,0],[1,0,0],[2,0,0],[2,1,0]]},
                    {"r":[30,150,60],"s":"a"},
                    ),
                ( # 2
                    {"r":[30,150,60],"s":[[0,0,0],[1,0,0],[2,0,0],[2,1,0]]},
                    {"r":[30,150,60],"s":[[0,0,0],[1,0,0],[1,1,0],[2,1,0]]},
                    ),
                ( # 3
                    {"r":[30,150,20],"s":[[0,0,0],[1,0,0],[2,0,0],[2,1,0]]},
                    {"r":[30,150,60],"s":"a"},
                    ),
                ( # 4
                    {"r":[30,122,60],"s":[[0,0,0],[1,0,0],[1,1,0],[2,1,0]]},
                    {"r":[30,150,60],"s":[[0,0,0],[1,0,0],[2,0,0],[2,1,0]]},
                    ),
                ( # 5
                    {"r":[30,150,60],"s":[[0,0,0],[1,0,0],[2,0,0],[3,0,0]]},
                    {"r":[30,122,0],"s":[[0,0,0],[1,0,0],[2,0,0],[1,1,0]]},
                    ),
                ( # 6
                    {"r":[140,320,60],"s":[[0,0,0],[1,0,0],[2,0,0],[2,1,0],[2,1,1]]},
                    {"r":[140,340,40],"s":"a"},
                    ),
                ( # 7
                    {"r":[200,320,60],"s":[[0,0,0],[1,0,0],[2,0,0],[2,1,0],[2,1,1]]},
                    {"r":[200,320,60],"s":[[0,0,0],[1,0,0],[2,0,0],[2,1,0],[2,1,-1]]},
                    ),
                ( # 8
                    {"r":[120,200,60],"s":[[0,0,0],[1,0,0],[2,0,0],[2,1,0],[2,1,1]]},
                    {"r":[120,320,60],"s":"a"},
                    ),
                ( # 9
                    {"r":[120,320,60],"s":[[0,0,0],[1,0,0],[2,0,0],[3,0,0],[4,0,0]]},
                    {"r":[120,320,60],"s":[[0,0,0],[1,0,0],[2,0,0]]},
                    ),
                ( # 10
                    {"r":[120,320,60],"s":[[0,0,0],[1,0,0],[2,0,0],[3,0,0],[4,0,0]]},
                    {"r":[120,120,60],"s":[[0,0,0],[1,0,0],[2,0,0],[3,0,0]]},
                    ),
                ( # 11
                    {"r":[20,15,0],"s":[[0,0,0],[-1,0,0],[-2,0,0],[-3,0,0],[-3,-1,0],[-3,-2,0],[-3,-2,1],[-3,-2,2],[-3,-2,3],[-4,-2,3],[-5,-2,3],[-6,-2,3]]},
                    {"r":[120,20,90], "s":"a"},
                    ),
                ( # 12
                    {"r":[20,15,0],"s":[[0,0,0],[0,-1,0],[0,-2,0],[0,-3,0],[0,-3,-1],[0,-3,-2],[0,-3,-3],[-1,-3,-3],[-2,-3,-3],[-2,-4,-3],[-2,-5,-3],[-2,-6,-3]]},
                    {"r":[20,15,0],"s":[[0,0,0],[-1,0,0],[-2,0,0],[-3,0,0],[-3,-1,0],[-3,-2,0],[-3,-2,1],[-3,-2,2],[-3,-2,3],[-4,-2,3],[-5,-2,3],[-6,-2,3]]},
                    ),
                ( # 13
                    {"r":[10,30,10],"s":[[0,0,0],[0,-1,0],[1,-1,0],[2,-1,0],[3,-1,0],[3,-2,0],[3,-3,0],[3,-4,0],[3,-4,-1],[3,-4,-2]]},
                    {"r":[320,160,10],"s":"a"},
                    ),
                ( # 14
                    {"r":[320,160,10],"s":[[0,0,0],[0,-1,0],[1,-1,0],[2,-1,0],[3,-1,0],[3,-2,0],[3,-3,0],[3,-4,0],[3,-4,-1],[3,-4,-2]]},
                    {"r":[10,30,10],"s":"a"},
                    ),
                ( # 15
                    {"r":[-20,50,160],"s":[[0,0,0],[0,-1,0],[0,-2,0],[-1,-2,0],[-1,-2,-1],[-1,-2,-2],[-1,-2,-3],[-2,-2,-3],[-3,-2,-3]]},
                    {"r":[70,-5,90],"s":"a"},
                    ),
                ( # 16
                    {"r":[270,100,-10],"s":[[0,-4,0],[0,-3,0],[0,-2,0],[-1,-2,0],[-1,-2,-1],[-1,-2,-2],[-1,-2,-3],[-2,-2,-3],[-3,-2,-3]]},
                    {"r":[-20,50,160],"s":[[0,0,0],[0,-1,0],[0,-2,0],[-1,-2,0],[-1,-2,-1],[-1,-2,-2],[-1,-2,-3],[-2,-2,-3],[-3,-2,-3]]},
                    ),
                ( # 17
                    {"r":[50,190,0],"s":[[0,-4,0],[0,-3,0],[0,-2,0],[-1,-2,0],[-1,-2,-1],[-1,-2,-2],[-1,-2,-3],[-2,-2,-3],[-3,-2,-3]]},
                    {"r":[300,315,10],"s":[[0,0,0],[0,-1,0],[1,-1,0],[2,-1,0],[3,-1,0],[3,-2,0],[3,-3,0],[3,-4,0],[3,-4,-1],[3,-4,-2]]}
                    ),
                ( # 18
                    {"r":[60,50,0],"s":[[0,0,0],[1,0,0],[1,1,0],[1,1,1]]},
                    {"r":[60,10,50],"s":[[0,0,0],[1,0,0],[1,1,0],[1,1,-1]]},
                    ),
                ( # 19
                    {"r":[13,-26,0],"s":[[0,0,0],[1,1,0],[2,2,0],[3,3,0],[3,3,1],[3,3,2],[2,3,2],[1,3,2],[0,3,2],[0,2,2],[0,1,2],[0,0,2],[0,0,1]]},
                    {"r":[25,20,0],"s":[[0,0,0],[1,1,0],[2,2,0],[3,3,0],[3,3,-1],[3,3,-2],[2,3,-2],[1,3,-2],[0,3,-2],[0,2,-2],[0,1,-2],[0,0,-2],[0,0,-1]]},
                    ),
                ( # 20
                    {"r":[58,156,0],"s":[[0,0,0],[1,1,1],[2,2,2],[3,3,3],[-1,-1,-1],[-2,-2,-2],[-3,-3,-3],[1,1,-1],[2,2,-2],[3,3,-3],[1,-1,-1],[2,-2,-2],[3,-3,-3]]},
                    {"r":[240,42,0],"s":[[0,0,0],[1,1,1],[2,2,2],[3,3,3],[-1,-1,-1],[-2,-2,-2],[-3,-3,-3],[-1,1,-1],[-2,2,-2],[-3,3,-3],[1,-1,-1],[2,-2,-2],[3,-3,-3]]},
                    ),
                ]

        battery = Battery.objects.get(slug='default')

        for i, (block_a, block_b) in enumerate(blocks):
            key = block_b['s'] == 'a'
            
            representation = json.dumps({
                    'a': block_a,
                    'b': block_b,
                    })

            task, created = Task.objects.update_or_create(
                    pk=i+next_id,
                    defaults={
                        'key': key,
                        'representation': representation,
                        }
                    )

            BatteryTask.objects.update_or_create(
                    pk=i+next_id,
                    defaults={
                        'battery': battery,
                        'task': task,
                        'order': i+1,
                        },
                    )

def pathtoblock(path):
    block = [[0, 0, 0]]

    for move in path:
        steps = int(move[:-1])
        direction = move[-1]
        for i in range(steps):
            o = 1
            if direction in 'lub':
                o = -o

            c = {'l': 'r', 'd': 'u', 'b': 'f'}.get(direction, direction)
            c = {'r': 0, 'u': 1, 'f': 2}.get(c, c)

            block.append(block[-1][:])
            block[-1][int(c)] += o

    return block

def rotation(level):
    angles = [45, 135, 225, 315]
    levels = [0, 45, 145]
    ra = [angles[random.randrange(0, 4)] + random.gauss(0, 15) for i in range(0, 3)]
    rb = map(lambda e: e + angles[level] + random.gauss(0, 15), ra)
    return ra, list(rb)
